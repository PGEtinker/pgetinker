#!/usr/bin/env bash

if [ "$EUID" -eq 0 ]; then
    echo "Error: This script must not be run as root."
    exit 1
fi

UNAMEOUT="$(uname -s)"

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Laravel Sail supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

# Determine if stdout is a terminal...
if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        NC="$(tput sgr0)"
    fi
fi

# Function that prints the available commands...
function display_help {
    echo "PGEtinker Development Utiliy"
    echo
    echo "This script is an extended version of the Laravel Sail script."
    echo "Developers familiar with sail should have an easy time using it."
    echo
    echo "${YELLOW}Usage:${NC}" >&2
    echo "  pgetinker COMMAND [options] [arguments]"
    echo
    echo "Unknown commands are passed to the docker-compose binary."
    echo
    echo "${YELLOW}docker-compose Commands:${NC}"
    echo "  ${GREEN}pgetinker up${NC}        Start the application"
    echo "  ${GREEN}pgetinker up -d${NC}     Start the application in the background"
    echo "  ${GREEN}pgetinker stop${NC}      Stop the application"
    echo "  ${GREEN}pgetinker restart${NC}   Restart the application"
    echo "  ${GREEN}pgetinker ps${NC}        Display the status of all containers"
    echo
    echo "${YELLOW}Artisan Commands:${NC}"
    echo "  ${GREEN}pgetinker artisan ...${NC}          Run an Artisan command"
    echo "  ${GREEN}pgetinker artisan queue:work${NC}"
    echo
    echo "${YELLOW}PHP Commands:${NC}"
    echo "  ${GREEN}pgetinker php ...${NC}   Run a snippet of PHP code"
    echo "  ${GREEN}pgetinker php -v${NC}"
    echo
    echo "${YELLOW}Composer Commands:${NC}"
    echo "  ${GREEN}pgetinker composer ...${NC}                       Run a Composer command"
    echo "  ${GREEN}pgetinker composer require laravel/sanctum${NC}"
    echo
    echo "${YELLOW}Node Commands:${NC}"
    echo "  ${GREEN}pgetinker node ...${NC}         Run a Node command"
    echo "  ${GREEN}pgetinker node --version${NC}"
    echo
    echo "${YELLOW}NPM Commands:${NC}"
    echo "  ${GREEN}pgetinker npm ...${NC}        Run a npm command"
    echo "  ${GREEN}pgetinker npx${NC}            Run a npx command"
    echo "  ${GREEN}pgetinker npm run prod${NC}"
    echo
    echo "${YELLOW}PNPM Commands:${NC}"
    echo "  ${GREEN}pgetinker pnpm ...${NC}        Run a pnpm command"
    echo "  ${GREEN}pgetinker pnpx${NC}            Run a pnpx command"
    echo "  ${GREEN}pgetinker pnpm run prod${NC}"
    echo
    echo "${YELLOW}Yarn Commands:${NC}"
    echo "  ${GREEN}pgetinker yarn ...${NC}        Run a Yarn command"
    echo "  ${GREEN}pgetinker yarn run prod${NC}"
    echo
    echo "${YELLOW}Bun Commands:${NC}"
    echo "  ${GREEN}pgetinker bun ...${NC}        Run a bun command"
    echo "  ${GREEN}pgetinker bunx${NC}           Run a bunx command"
    echo "  ${GREEN}pgetinker bun run prod${NC}"
    echo
    echo "${YELLOW}Database Commands:${NC}"
    echo "  ${GREEN}pgetinker mysql${NC}     Start a MySQL CLI session within the 'mysql' container"
    echo "  ${GREEN}pgetinker mariadb${NC}   Start a MySQL CLI session within the 'mariadb' container"
    echo "  ${GREEN}pgetinker psql${NC}      Start a PostgreSQL CLI session within the 'pgsql' container"
    echo "  ${GREEN}pgetinker mongodb${NC}   Start a Mongo Shell session within the 'mongodb' container"
    echo "  ${GREEN}pgetinker redis${NC}     Start a Redis CLI session within the 'redis' container"
    echo "  ${GREEN}pgetinker valkey${NC}    Start a Valkey CLI session within the 'valkey' container"
    echo
    echo "${YELLOW}Debugging:${NC}"
    echo "  ${GREEN}pgetinker debug ...${NC}          Run an Artisan command in debug mode"
    echo "  ${GREEN}pgetinker debug queue:work${NC}"
    echo
    echo "${YELLOW}Running Tests:${NC}"
    echo "  ${GREEN}pgetinker test${NC}          Run the PHPUnit tests via the Artisan test command"
    echo "  ${GREEN}pgetinker phpunit ...${NC}   Run PHPUnit"
    echo "  ${GREEN}pgetinker pest ...${NC}      Run Pest"
    echo "  ${GREEN}pgetinker pint ...${NC}      Run Pint"
    echo "  ${GREEN}pgetinker dusk${NC}          Run the Dusk tests (Requires the laravel/dusk package)"
    echo "  ${GREEN}pgetinker dusk:fails${NC}    Re-run previously failed Dusk tests (Requires the laravel/dusk package)"
    echo
    echo "${YELLOW}Container CLI:${NC}"
    echo "  ${GREEN}pgetinker shell${NC}        Start a shell session within the application container"
    echo "  ${GREEN}pgetinker bash${NC}         Alias for 'pgetinker shell'"
    echo "  ${GREEN}pgetinker root-shell${NC}   Start a root shell session within the application container"
    echo "  ${GREEN}pgetinker root-bash${NC}    Alias for 'pgetinker root-shell'"
    echo "  ${GREEN}pgetinker tinker${NC}       Start a new Laravel Tinker session"
    echo
    echo "${YELLOW}Sharing:${NC}"
    echo "  ${GREEN}pgetinker share${NC}   Share the application publicly via a temporary URL"
    echo "  ${GREEN}pgetinker open${NC}    Open the site in your browser"
    echo
    echo "${YELLOW}Binaries:${NC}"
    echo "  ${GREEN}pgetinker bin ...${NC}   Run Composer binary scripts from the vendor/bin directory"
    echo "  ${GREEN}pgetinker run ...${NC}   Run a command within the application container"
    echo
    echo "${YELLOW}Customization:${NC}"
    echo "  ${GREEN}pgetinker artisan sail:publish${NC}   Publish the Sail configuration files"
    echo "  ${GREEN}pgetinker build --no-cache${NC}       Rebuild all of the Sail containers"
    echo
    echo "${YELLOW}Misc.${NC}"
    echo "  ${GREEN}pgetinker initialize${NC}   Initializes PGEtinker. Required on fresh installs."
    echo ""
    echo "${YELLOW}Language Server:${NC}"
    echo "  ${GREEN}pgetinker language-server node ...${NC}     Run node commands in the language-server container"
    echo "  ${GREEN}pgetinker ls node ...${NC}                  Alias for 'pgetinker language-server node'"
    echo "  ${GREEN}pgetinker language-server npm ...${NC}      Run npm commands in the language-server container"
    echo "  ${GREEN}pgetinker ls npm ...${NC}                   Alias for 'pgetinker language-server npm'"
    echo "  ${GREEN}pgetinker language-server run ...${NC}      Run a command in the language-server container"
    echo "  ${GREEN}pgetinker ls run ...${NC}                   Alias for 'pgetinker language-server run'"
    exit 1
}




# Proxy the "help" command...
if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

# Source the ".env" file so Laravel's environment variables are available...
# shellcheck source=/dev/null
if [ -n "$APP_ENV" ] && [ -f ./.env."$APP_ENV" ]; then
  source ./.env."$APP_ENV";
elif [ -f ./.env ]; then
  source ./.env;
else
  cp ./.env.sail .env
  source ./.env
fi

# Define environment variables...
export APP_PORT=${APP_PORT:-80}
export APP_SERVICE=${APP_SERVICE:-"laravel.test"}
export PROXY_SERVICE=${PROXY_SERVICE:-"proxy"}
export DB_PORT=${DB_PORT:-3306}
export WWWUSER=${WWWUSER:-$UID}
export WWWGROUP=${WWWGROUP:-$(id -g)}
export LANGUAGE_SERVER_SERVICE=${LANGUAGE_SERVER_SERVICE:-"language-server"}
export SAIL_FILES=${SAIL_FILES:-""}
export SAIL_SHARE_DASHBOARD=${SAIL_SHARE_DASHBOARD:-4040}
export SAIL_SHARE_SERVER_HOST=${SAIL_SHARE_SERVER_HOST:-"laravel-sail.site"}
export SAIL_SHARE_SERVER_PORT=${SAIL_SHARE_SERVER_PORT:-8080}
export SAIL_SHARE_SUBDOMAIN=${SAIL_SHARE_SUBDOMAIN:-""}
export SAIL_SHARE_DOMAIN=${SAIL_SHARE_DOMAIN:-"$SAIL_SHARE_SERVER_HOST"}
export SAIL_SHARE_SERVER=${SAIL_SHARE_SERVER:-""}
export EMSCRIPTEN_VERSION=${EMSCRIPTEN_VERSION:-"3.1.56"}

# Function that outputs Sail is not running...
function sail_is_not_running {
    echo "${BOLD}Sail is not running.${NC}" >&2
    echo "" >&2
    echo "${BOLD}You may Sail using the following commands:${NC} './scripts/pgetinker up' or './scripts/pgetinker up -d'" >&2

    exit 1
}

# Function to check if all services are healthy
wait_for_healthy() {
    container_id=$("${DOCKER_COMPOSE[@]}" ps -q "$APP_SERVICE")
    if [ -z "$container_id" ]; then
        echo "Error: Container for $APP_SERVICE not found."
        exit 1
    fi

    # Poll until the service is healthy
    while true; do
        health_status=$(docker inspect --format='{{.State.Health.Status}}' "$container_id" 2>/dev/null || echo "no-healthcheck")
        case "$health_status" in
            "healthy")
            break
            ;;
            "unhealthy")
            echo "$APP_SERVICE is unhealthy, exiting..."
            exit 1
            ;;
            "no-healthcheck")
            break
            ;;
            *)
            sleep 2
            ;;
        esac
    done
}

# Define Docker Compose command prefix...
if docker compose &> /dev/null; then
    DOCKER_COMPOSE=(docker compose)
else
    DOCKER_COMPOSE=(docker-compose)
fi

if [ -n "$SAIL_FILES" ]; then
    # Convert SAIL_FILES to an array...
    IFS=':' read -ra SAIL_FILES <<< "$SAIL_FILES"

    for FILE in "${SAIL_FILES[@]}"; do
        if [ -f "$FILE" ]; then
            DOCKER_COMPOSE+=(-f "$FILE")
        else
            echo "${BOLD}Unable to find Docker Compose file: '${FILE}'${NC}" >&2

            exit 1
        fi
    done
fi

EXEC="yes"

if [ -z "$SAIL_SKIP_CHECKS" ] && [ "$1" != "initialize" ]; then
    # Ensure that Docker is running...
    if ! docker info > /dev/null 2>&1; then
        echo "${BOLD}Docker is not running.${NC}" >&2

        exit 1
    fi

    # Determine if Sail is currently up...
    if "${DOCKER_COMPOSE[@]}" ps "$APP_SERVICE" 2>&1 | grep 'Exit\|exited'; then
        echo "${BOLD}Shutting down old Sail processes...${NC}" >&2

        "${DOCKER_COMPOSE[@]}" down > /dev/null 2>&1

        EXEC="no"
    elif [ -z "$("${DOCKER_COMPOSE[@]}" ps -q)" ]; then
        EXEC="no"
    fi
fi

ARGS=()

# Proxy PHP commands to the "php" binary on the application container...
if [ "$1" == "php" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" "php")
    else
        sail_is_not_running
    fi

# Proxy vendor binary commands on the application container...
elif [ "$1" == "bin" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        CMD=$1
        shift 1
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" ./vendor/bin/"$CMD")
    else
        sail_is_not_running
    fi

# Proxy commands on the application container...
elif [ "$1" == "run" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        CMD=$1
        shift 1
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" "$CMD")
    else
        sail_is_not_running
    fi

# Proxy docker-compose commands to the docker-compose binary on the application container...
elif [ "$1" == "docker-compose" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" "${DOCKER_COMPOSE[@]}")
    else
        sail_is_not_running
    fi

# Proxy Composer commands to the "composer" binary on the application container...
elif [ "$1" == "composer" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" "composer")
    else
        sail_is_not_running
    fi

# Proxy Artisan commands to the "artisan" binary on the application container...
elif [ "$1" == "artisan" ] || [ "$1" == "art" ] || [ "$1" == "a" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" php artisan)
    else
        sail_is_not_running
    fi

# Proxy the "debug" command to the "php artisan" binary on the application container with xdebug enabled...
elif [ "$1" == "debug" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail -e XDEBUG_TRIGGER=1)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" php artisan)
    else
        sail_is_not_running
    fi

# Proxy the "test" command to the "php artisan test" Artisan command...
elif [ "$1" == "test" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" php artisan test)
    else
        sail_is_not_running
    fi

# Proxy the "phpunit" command to "php vendor/bin/phpunit"...
elif [ "$1" == "phpunit" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" php vendor/bin/phpunit)
    else
        sail_is_not_running
    fi

# Proxy the "pest" command to "php vendor/bin/pest"...
elif [ "$1" == "pest" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" php vendor/bin/pest)
    else
        sail_is_not_running
    fi

# Proxy the "pint" command to "php vendor/bin/pint"...
elif [ "$1" == "pint" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" php vendor/bin/pint)
    else
        sail_is_not_running
    fi

# Proxy the "dusk" command to the "php artisan dusk" Artisan command...
elif [ "$1" == "dusk" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(-e "APP_URL=http://${PROXY_SERVICE}")
        ARGS+=(-e "DUSK_DRIVER_URL=http://selenium:4444/wd/hub")
        ARGS+=("$APP_SERVICE" php artisan dusk)
    else
        sail_is_not_running
    fi

# Proxy the "dusk:fails" command to the "php artisan dusk:fails" Artisan command...
elif [ "$1" == "dusk:fails" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(-e "APP_URL=http://${PROXY_SERVICE}")
        ARGS+=(-e "DUSK_DRIVER_URL=http://selenium:4444/wd/hub")
        ARGS+=("$APP_SERVICE" php artisan dusk:fails)
    else
        sail_is_not_running
    fi

# Initiate a Laravel Tinker session within the application container...
elif [ "$1" == "tinker" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" php artisan tinker)
    else
        sail_is_not_running
    fi

# Proxy Node commands to the "node" binary on the application container...
elif [ "$1" == "node" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" node)
    else
        sail_is_not_running
    fi

# Proxy NPM commands to the "npm" binary on the application container...
elif [ "$1" == "npm" ]; then
    shift 1
    
    # allow `npm run build` to bypass container memory limitations in a production environment
    if [ "$1" == "run" ] && [ "$2" == "build" ]; then
        docker run --rm -e WWWUSER="${WWWUSER}" -v '.:/var/www/html' pgetinker/app npm "$@"
        exit
    fi

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" npm)
    else
        sail_is_not_running
    fi

# Proxy NPX commands to the "npx" binary on the application container...
elif [ "$1" == "npx" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" npx)
    else
        sail_is_not_running
    fi

# Proxy PNPM commands to the "pnpm" binary on the application container...
elif [ "$1" == "pnpm" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" pnpm)
    else
        sail_is_not_running
    fi

# Proxy PNPX commands to the "pnpx" binary on the application container...
elif [ "$1" == "pnpx" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" pnpx)
    else
        sail_is_not_running
    fi

# Proxy Yarn commands to the "yarn" binary on the application container...
elif [ "$1" == "yarn" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" yarn)
    else
        sail_is_not_running
    fi

# Proxy Bun commands to the "bun" binary on the application container...
elif [ "$1" == "bun" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" bun)
    else
        sail_is_not_running
    fi

# Proxy Bun X commands to the "bunx" binary on the application container...
elif [ "$1" == "bunx" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" bunx)
    else
        sail_is_not_running
    fi

# Initiate a MySQL CLI terminal session within the "mysql" container...
elif [ "$1" == "mysql" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(mysql bash -c)
        ARGS+=("MYSQL_PWD=\${MYSQL_PASSWORD} mysql -u \${MYSQL_USER} \${MYSQL_DATABASE}")
    else
        sail_is_not_running
    fi

# Initiate a MySQL CLI terminal session within the "mariadb" container...
elif [ "$1" == "mariadb" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(mariadb bash -c)
        ARGS+=("MYSQL_PWD=\${MYSQL_PASSWORD} mariadb -u \${MYSQL_USER} \${MYSQL_DATABASE}")
    else
        sail_is_not_running
    fi

# Initiate a PostgreSQL CLI terminal session within the "pgsql" container...
elif [ "$1" == "psql" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(pgsql bash -c)
        ARGS+=("PGPASSWORD=\${PGPASSWORD} psql -U \${POSTGRES_USER} \${POSTGRES_DB}")
    else
        sail_is_not_running
    fi

# Initiate a Bash shell within the application container...
elif [ "$1" == "shell" ] || [ "$1" == "bash" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u sail)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" bash)
    else
        sail_is_not_running
    fi

# Initiate a root user Bash shell within the application container...
elif [ "$1" == "root-shell" ] || [ "$1" == "root-bash" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u root)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" bash)
    else
        sail_is_not_running
    fi

# Initiate a MongoDB Shell within the "mongodb" container...
elif [ "$1" == "mongodb" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(mongodb mongosh --port "${FORWARD_MONGODB_PORT:-27017}" --username "$MONGODB_USERNAME" --password "$MONGODB_PASSWORD" --authenticationDatabase admin)
    else
        sail_is_not_running
    fi

# Initiate a Redis CLI terminal session within the "redis" container...
elif [ "$1" == "redis" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(redis redis-cli)
    else
        sail_is_not_running
    fi

# Initiate a Valkey CLI terminal session within the "valkey" container...
elif [ "$1" == "valkey" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(valkey valkey-cli)
    else
        sail_is_not_running
    fi

# Share the site...
elif [ "$1" == "share" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        docker run --init --rm --add-host=host.docker.internal:host-gateway -p "$SAIL_SHARE_DASHBOARD":4040 -t beyondcodegmbh/expose-server:latest share http://host.docker.internal:"$APP_PORT" \
            --server-host="$SAIL_SHARE_SERVER_HOST" \
            --server-port="$SAIL_SHARE_SERVER_PORT" \
            --auth="$SAIL_SHARE_TOKEN" \
            --server="$SAIL_SHARE_SERVER" \
            --subdomain="$SAIL_SHARE_SUBDOMAIN" \
            --domain="$SAIL_SHARE_DOMAIN" \
            "$@"

        exit
    else
        sail_is_not_running
    fi

# Open the site...
elif [ "$1" == "open" ]; then
    shift 1

    if command -v open &>/dev/null; then
        OPEN="open"
    elif command -v xdg-open &>/dev/null; then
        OPEN="xdg-open"
    else
        echo "Neither open nor xdg-open is available. Exiting."
        exit 1
    fi

    if [ "$EXEC" == "yes" ]; then

        if [[ -n "$APP_PORT" && "$APP_PORT" != "80" ]]; then
            FULL_URL="${APP_URL}:${APP_PORT}"
        else
            FULL_URL="$APP_URL"
        fi

        $OPEN "$FULL_URL"

        exit
    else
        sail_is_not_running
    fi

# Clean PGEtinker.
elif [ "$1" == "clean" ]; then

    if [ "$EXEC" == "no" ]; then
        echo "PGEtinker services are not running."
        echo "Run: ./scripts/pgetinker up -d"
        echo ""
        exit
    fi

    echo "This command will:"
    echo "  - Purge logs."
    echo "  - Purge workspace files."
    echo "  - Purge redis caches."
    echo ""
    echo "This command usually needs to be run once after pulling"
    echo "the repository. Using it afterwards can result in"
    echo "unexpected and undesirable data loss."
    echo ""
    echo -n "Proceed? (y/N) "; read proceed
    echo ""
    
    proceed=${proceed:-N}
    
    case $proceed in
        [Yy]*)
            echo "#### Purging laravel.log"
            rm -rf storage/logs/laravel.log
            touch storage/logs/laravel.log
            echo "## Done."
            echo

            echo "#### Purging workspaces."
            rm -rf storage/app/workspaces/*
            echo "## Done."
            echo

            echo "#### Purging redis cache."
            scripts/pgetinker exec redis redis-cli FLUSHALL > /dev/null
            echo "## Done."
            echo
            
            ;;
        [Nn]*)
            echo "You chose to exit without doing anything!"
            echo ""
            ;;
        *)
            echo "You chose to exit without doing anything!"
            echo ""
            ;;
    esac            
    exit

# Update PGEtinker
elif [ "$1" == "update" ]; then
    
    forceMigrate=""

    if [ "$EXEC" == "yes" ]; then
        echo "PGEtinker services are running."
        echo "Run: ./scripts/pgetinker down"
        echo ""
        exit
    fi
    if [ "$2" == "ci" ]; then
        forceMigrate="--force"
        proceed=y
    else
        echo "This command will:"
        echo "  - Run git pull."
        echo "  - Build changed docker images."
        echo "  - Install composer dependencies."
        echo "  - Install NPM dependencies."
        echo "  - Generate a pre-built frontend."
        echo "  - Pull wiki repo."
        echo "  - Update esmcripten."
        echo "  - Build shared emscripten libraries."
        echo "  - Run laravel migration scripts."
        echo "  - Restart PGEtinker services."
        echo ""
        echo "This command helps streamline the update process"
        echo "by automatically handling all of the things that"
        echo "needs to be done each time there's a potentially"
        echo "breaking change to the project!"
        echo ""
        echo -n "Proceed? (y/N) "; read proceed
        echo ""    
        
        proceed=${proceed:-N}
    fi    
    
    case $proceed in
        [Yy]*)
            rm -rf public/build public/hot

            echo "#### Run git pull."
            git pull
            if [ ! $? -eq 0 ]; then
                echo "## Failed to pull latest version."
                exit 1
            fi
            echo "## Done."
            echo
            
            echo "#### Build changed docker images."
            scripts/pgetinker build
            if [ ! $? -eq 0 ]; then
                echo "## Failed to build docker images."
                exit 1
            fi
            echo "## Done."
            echo

            echo "#### Install composer dependencies."
            docker run --rm -e WWWUSER="${WWWUSER}" -v .:/var/www/html pgetinker/app composer install --no-interaction
            if [ ! $? -eq 0 ]; then
                echo "## Composer dependencies failed to install."
                exit 1
            fi
            echo "## Done."
            echo

            echo "#### Install NPM dependencies."
            docker run --rm -e WWWUSER="${WWWUSER}" -v .:/var/www/html pgetinker/app npm install --yes
            if [ ! $? -eq 0 ]; then
                echo "## NPM dependencies failed to install."
                exit 1
            fi            
            echo "## Done."
            echo

            echo "#### Generate a pre-built frontend."
            docker run --rm -e WWWUSER="${WWWUSER}" -v '.:/var/www/html' pgetinker/app npm run build
            if [ ! $? -eq 0 ]; then
                echo "## Static files failed to install."
                exit 1
            fi
            echo "## Done."
            echo

            echo "#### Pull wiki repo."
            (cd services/wiki; git pull)
            if [ ! $? -eq 0 ]; then
                echo "## Failed to pull latest wiki."
                exit 1
            fi
            echo "## Done."
            echo

            echo "#### Clone and install emscripten."
            if [ -f "shared/emsdk/emsdk_env.sh" ]; then
                echo "## emsdk has already been cloned. pulling"
                (cd shared/emsdk; git pull)
            else
                echo "## emsdk not found, cloning."
                (mkdir -p shared; cd shared; git clone https://github.com/emscripten-core/emsdk.git)
            fi

            docker run --rm -e WWWUSER="${WWWUSER}" -v './shared/emsdk:/var/www/html' pgetinker/app bash emsdk install "$EMSCRIPTEN_VERSION"
            docker run --rm -e WWWUSER="${WWWUSER}" -v './shared/emsdk:/var/www/html' pgetinker/app bash emsdk activate "$EMSCRIPTEN_VERSION"
            
            echo "## Done."
            echo

            echo "#### Build shared emscripten libraries."
            docker run --rm -e WWWUSER="${WWWUSER}" -v './shared/emsdk:/opt/emsdk' -v './shared/libs:/var/www/html' pgetinker/app bash build-libs.sh
            if [ ! $? -eq 0 ]; then
                echo "## Failed to build shared emscripten libraries."
                exit 1
            fi
            echo "## Done."
            echo

            echo "#### Prepare containers."
            echo "## Phase 1: start services."
            scripts/pgetinker up -d
            sleep 10
            wait_for_healthy
            sleep 10
            echo "## Done."
            echo

            echo "## Phase 2: database migrations."
            if [ ! -z "$forceMigrate" ]; then
                scripts/pgetinker artisan migrate "$forceMigrate"
            else
                scripts/pgetinker artisan migrate
            fi

            if [ ! $? -eq 0 ]; then
                echo "## Failed to run database migrations."
                exit 1
            fi
            echo "## Done."
            echo

            echo "## Phase 3: shutdown services."
            scripts/pgetinker down
            echo "## Done."
            echo

            echo "########################################################"
            echo "#"
            echo "#                PGEtinker is ready!"
            echo "#"
            echo "#            Run: ./scripts/pgetinker up -d"
            echo "#"
            echo "#     Site will be available at: $APP_URL"
            echo "#"
            echo "########################################################"
            echo ""

            ;;
        [Nn]*)
            echo "You chose to exit without doing anything!"
            echo ""
            ;;
        *)
            echo "You chose to exit without doing anything!"
            echo ""
            ;;
    esac

    exit

# Initialize PGEtinker.
elif [ "$1" == "initialize" ]; then

    if [ -z "$("${DOCKER_COMPOSE[@]}" ps -q 2> /dev/null)" ]; then
        EXEC="no"
    fi

    if [ "$EXEC" == "yes" ]; then
        echo "PGEtinker services are running."
        echo "Run: ./scripts/pgetinker down"
        echo ""
        exit
    fi

    if [ "$2" == "ci" ]; then
        proceed=y
    else
        echo "This command will:"
        echo "  - Clear all vendor/npm dependencies."
        echo "  - Clear all configurations."
        echo "  - Create default environment configurations."
        echo "  - Build all docker images."
        echo "  - Install composer dependencies."
        echo "  - Install NPM dependencies."
        echo "  - Generate laravel application key."
        echo "  - Generate a pre-built frontend."
        echo "  - Clone wiki repo."
        echo "  - Create wiki symlinks."
        echo "  - Clone and install emscripten."
        echo "  - Build shared emscripten libraries."
        echo "  - Run laravel migration scripts."
        echo ""
        echo "This command usually needs to be run once after pulling"
        echo "the repository. Using it afterwards can result in"
        echo "unexpected and undesirable data loss."
        echo ""
        echo -n "Proceed? (y/N) "; read proceed
        echo ""
        
        proceed=${proceed:-N}

    fi
    
    case $proceed in
        [Yy]*)
            rm -rf docker-compose.yml vendor node_modules public/build public/hot .env services/wiki public/wiki
            
            echo "#### Creating default environment configuration."
            cp .env.sail .env > /dev/null 2>&1
            cp docker-compose.sail.yml docker-compose.yml
            echo "## Done."
            echo

            echo "#### Build all docker images."
            ./scripts/pgetinker build
            if [ ! $? -eq 0 ]; then
                echo "## failed to build docker images."
                exit 1
            fi
            echo "## Done."
            echo

            echo "#### Installing composer dependencies."
            docker run --rm -e WWWUSER="${WWWUSER}" -v .:/var/www/html pgetinker/app composer install --no-interaction
            if [ ! $? -eq 0 ]; then
                echo "## Composer dependencies failed to install."
                exit 1
            fi
            echo "## Done."
            echo

            echo "#### Installing npm dependencies."
            docker run --rm -e WWWUSER="${WWWUSER}" -v .:/var/www/html pgetinker/app npm install --yes
            if [ ! $? -eq 0 ]; then
                echo "## NPM dependencies failed to install."
                exit 1
            fi
            echo "## Done."
            echo
            
            echo "#### Generating application key."
            docker run --rm -e WWWUSER="${WWWUSER}" -v .:/var/www/html pgetinker/app php artisan key:generate > /dev/null 2>&1
            if [ ! $? -eq 0 ]; then
                echo "## Application key failed to generate."
                exit 1
            fi
            echo "## Done."
            echo

            echo "#### Building static files."
            docker run --rm -e WWWUSER="${WWWUSER}" -v '.:/var/www/html' pgetinker/app npm run build
            if [ ! $? -eq 0 ]; then
                echo "## Static files failed to install."
                exit 1
            fi
            echo "## Done."
            echo
            
            echo "#### Clone wiki repo."
            (mkdir -p services; cd services; git clone https://github.com/PGEtinker/wiki.git)
            echo "## Done."
            echo

            echo "#### Create wiki symlinks."
            ln -s /var/www/html/services/wiki/public public/wiki
            echo "## Done."
            echo
            
            echo "#### Clone and install emscripten."
            if [ -f "shared/emsdk/emsdk_env.sh" ]; then
                echo "## emsdk has already been cloned. pulling"
                (cd shared/emsdk; git pull)
            else
                echo "## emsdk not found, cloning."
                (mkdir -p shared; cd shared; git clone https://github.com/emscripten-core/emsdk.git)
            fi

            docker run --rm -e WWWUSER="${WWWUSER}" -v './shared/emsdk:/var/www/html' pgetinker/app bash emsdk install "$EMSCRIPTEN_VERSION"
            docker run --rm -e WWWUSER="${WWWUSER}" -v './shared/emsdk:/var/www/html' pgetinker/app bash emsdk activate "$EMSCRIPTEN_VERSION"
            
            echo "## Done."
            echo
            
            echo "#### Build emscripten libraries."
            docker run --rm -e WWWUSER="${WWWUSER}" -v './shared/emsdk:/opt/emsdk' -v './shared/libs:/var/www/html' pgetinker/app bash build-libs.sh
            if [ ! $? -eq 0 ]; then
                echo "## Emscripten libraries failed to build."
                exit 1
            fi
            echo "## Done."
            echo

            echo "#### Prepare containers."
            echo "## Phase 1: start services."
            ./scripts/pgetinker up -d
            sleep 10
            wait_for_healthy
            sleep 10
            echo "## Done."
            echo
            
            echo "## Phase 2: database migrations."
            ./scripts/pgetinker artisan migrate:fresh
            echo "## Done."
            echo
            
            echo "## Phase 3: shutdown services."
            ./scripts/pgetinker down 
            echo "## Done."
            echo
           
            echo "########################################################"
            echo "#"
            echo "#                PGEtinker is ready!"
            echo "#"
            echo "#            Run: ./scripts/pgetinker up -d"
            echo "#"
            echo "#     Site will be available at: $APP_URL"
            echo "#"
            echo "########################################################"
            echo ""
            ;;
        [Nn]*)
            echo "You chose to exit without doing anything!"
            echo ""
            ;;
        *)
            echo "You chose to exit without doing anything!"
            echo ""
            ;;
    esac    
    
    exit

elif [ "$1" == "language-server" ] || [ "$1" == "ls" ]; then
    if [ "$2" == "node" ] || [ "$2" == "npm" ] || [ "$2" == "run" ]; then
        shift 1
        if [ "$EXEC" == "yes" ]; then
            if [ "$1" == "run" ]; then shift 1; fi
            CMD=$1
            shift 1
            ARGS+=(exec -u sail)
            [ ! -t 0 ] && ARGS+=(-T)
            
            ARGS+=("$LANGUAGE_SERVER_SERVICE" "$CMD")
        else
            sail_is_not_running
        fi
    fi


elif [ "$1" == "gitlog" ]; then
    git log origin/develop..HEAD --pretty="%ad|%s" --date=format:"%Y-%m-%d"
    exit
fi

# Run Docker Compose with the defined arguments...
"${DOCKER_COMPOSE[@]}" "${ARGS[@]}" "$@"
